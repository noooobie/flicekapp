{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction StatisticsComponent_div_9_hr_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"hr\");\n  }\n}\n\nfunction StatisticsComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelementStart(1, \"h3\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, StatisticsComponent_div_9_hr_5_Template, 1, 0, \"hr\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const stat_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i_r2 === 2 ? ctx_r0.currentNumber + \"%\" : stat_r1.value);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(stat_r1.description);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i_r2 < ctx_r0.statistics.length - 1);\n  }\n}\n\nexport let StatisticsComponent = /*#__PURE__*/(() => {\n  class StatisticsComponent {\n    constructor(el, renderer) {\n      this.el = el;\n      this.renderer = renderer;\n      this.currentNumber = 10; // Initial number\n\n      this.endNumber = 50; // End number\n\n      this.duration = 4000; // Duration in milliseconds\n\n      this.hasStarted = false; // To track if increment has started\n\n      this.statistics = [{\n        value: '5 - 15%',\n        description: 'More test system iteration'\n      }, {\n        value: '2 Weeks',\n        description: 'Reduction in project time'\n      }, {\n        value: '',\n        description: 'Decrease in data analysis time'\n      } // Empty value for dynamic number\n      ];\n    }\n\n    ngOnInit() {\n      this.setupIntersectionObserver();\n    }\n\n    setupIntersectionObserver() {\n      const observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting && !this.hasStarted) {\n            this.hasStarted = true;\n            this.incrementNumber(this.currentNumber, this.endNumber, this.duration);\n            observer.unobserve(entry.target); // Stop observing once the animation starts\n          }\n        });\n      }, {\n        threshold: 0.5\n      } // 50% of the element should be visible\n      );\n      observer.observe(this.el.nativeElement);\n    }\n\n    incrementNumber(start, end, duration) {\n      const range = end - start;\n      const incrementTime = Math.abs(Math.floor(duration / range));\n      let current = start;\n      const timer = setInterval(() => {\n        current += 1;\n        this.currentNumber = current;\n\n        if (current >= end) {\n          clearInterval(timer);\n        }\n      }, incrementTime);\n    }\n\n  }\n\n  StatisticsComponent.ɵfac = function StatisticsComponent_Factory(t) {\n    return new (t || StatisticsComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  StatisticsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StatisticsComponent,\n    selectors: [[\"app-statistics\"]],\n    decls: 10,\n    vars: 1,\n    consts: [[1, \"container\"], [1, \"left-section\"], [1, \"text-center\", \"my-line-2\"], [2, \"color\", \"blueviolet\"], [1, \"right-section\"], [\"class\", \"stat\", 4, \"ngFor\", \"ngForOf\"], [1, \"stat\"], [4, \"ngIf\"]],\n    template: function StatisticsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"span\", 3);\n        i0.ɵɵtext(4, \"Committed \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(5, \"to your Success \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"p\");\n        i0.ɵɵtext(7, \" 40 years of experience allow NI to streamline and simplify the test of millions of engineers through reliable solutions. We support your team with unrivaled confidence in the accuracy, precision, and repeatability of your measurements. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 4);\n        i0.ɵɵtemplate(9, StatisticsComponent_div_9_Template, 6, 3, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngForOf\", ctx.statistics);\n      }\n    },\n    directives: [i1.NgForOf, i1.NgIf],\n    styles: [\".container[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:flex-start;padding:5rem}.my-line-2[_ngcontent-%COMP%]{font-size:3rem;text-align:left!important;line-height:1;width:90%;margin:2rem 0;font-weight:500}.left-section[_ngcontent-%COMP%]{flex:1;padding-right:20px}.right-section[_ngcontent-%COMP%]{flex:1;padding-left:20px;display:flex;flex-direction:column;align-items:center}.stat[_ngcontent-%COMP%]{text-align:center;margin-bottom:20px}hr[_ngcontent-%COMP%]{width:100%;margin:10px 0;border:0;border-top:1px solid #ddd}h3[_ngcontent-%COMP%]{font-size:2.5rem;font-weight:600;color:#fff}@media (max-width: 600px){.my-line-2[_ngcontent-%COMP%]{font-size:1.8rem;margin-top:0!important;text-align:center!important;width:100%;line-height:2.2rem}.container[_ngcontent-%COMP%]{flex-direction:column;align-items:center;text-align:center;padding:1.2rem}.left-section[_ngcontent-%COMP%], .right-section[_ngcontent-%COMP%]{padding:0;width:100%}.right-section[_ngcontent-%COMP%]{margin-top:20px}h3[_ngcontent-%COMP%]{font-size:2.2rem}}\"]\n  });\n  return StatisticsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}